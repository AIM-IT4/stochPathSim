import numpy as np

class HestonModel:
    def __init__(self, v0, kappa, theta, sigma, rho, s0, T, n):
        self.v0 = v0
        self.kappa = kappa
        self.theta = theta
        self.sigma = sigma
        self.rho = rho
        self.s0 = s0
        self.T = T
        self.n = n

    def simulate(self):
        dt = self.T / self.n
        S = np.zeros(self.n)
        V = np.zeros(self.n)
        S[0], V[0] = self.s0, self.v0
        for t in range(1, self.n):
            z1, z2 = np.random.normal(size=2)
            z2 = self.rho * z1 + np.sqrt(1 - self.rho**2) * z2
            V[t] = abs(V[t-1] + self.kappa * (self.theta - V[t-1]) * dt + self.sigma * np.sqrt(V[t-1] * dt) * z2)
            S[t] = S[t-1] * np.exp(-0.5 * V[t] * dt + np.sqrt(V[t] * dt) * z1)
        return S, V
