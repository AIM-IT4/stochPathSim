import numpy as np

class GeometricBrownianMotion:
    def __init__(self, mu, sigma, s0, T, n):
        self.mu = mu
        self.sigma = sigma
        self.s0 = s0
        self.T = T
        self.n = n

    def simulate(self):
        dt = self.T / self.n
        t = np.linspace(0, self.T, self.n)
        W = np.random.standard_normal(size=self.n)
        W = np.cumsum(W) * np.sqrt(dt)
        S = self.s0 * np.exp((self.mu - 0.5 * self.sigma**2) * t + self.sigma * W)
        return t, S
